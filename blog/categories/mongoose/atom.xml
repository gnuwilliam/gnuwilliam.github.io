<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mongoose | William Oliveira]]></title>
  <link href="http://gnuwilliam.github.io/blog/categories/mongoose/atom.xml" rel="self"/>
  <link href="http://gnuwilliam.github.io/"/>
  <updated>2013-09-28T18:34:09-03:00</updated>
  <id>http://gnuwilliam.github.io/</id>
  <author>
    <name><![CDATA[William Oliveira]]></name>
    <email><![CDATA[sudowilliam@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple REST API using Express Node.js framework]]></title>
    <link href="http://gnuwilliam.github.io/blog/2013/09/28/simple-rest-api-using-express-node-dot-js-framework/"/>
    <updated>2013-09-28T16:58:00-03:00</updated>
    <id>http://gnuwilliam.github.io/blog/2013/09/28/simple-rest-api-using-express-node-dot-js-framework</id>
    <content type="html"><![CDATA[<p>Hello, folks!</p>

<p>Recently I&rsquo;ve been working a lot with <strong>Node.js</strong>, specifically with <strong>Express</strong>, so I decided to write this blogpost to help anyone who wants to start out using it, and show how to implement a basic <strong>REST API</strong> using the platform.</p>

<p>I&rsquo;m gonna list what you&rsquo;ll need to follow up this article:</p>

<ul>
<li><a href="http://nodejs.org/">Node.JS</a></li>
<li><a href="http://www.mongodb.org/">MongoDB</a></li>
</ul>


<p>You can either use the local <code>express</code> or install it globally <code>npm install -g express</code>.</p>

<p>Let&rsquo;s create our <strong>app</strong> <code>express my-app</code>.</p>

<p>Now, the <code>package.json</code> listing the <strong>dependencies</strong> of the project we&rsquo;ll be working on:</p>

<p>``` javascript package.json
{
  &ldquo;name&rdquo;: &ldquo;application-name&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.1&rdquo;,
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"express": "*",
"mongoose": "*"
</code></pre>

<p>  }
}
```</p>

<p>Go to the <strong>app</strong> directory and <strong>install</strong> the <strong>dependencies</strong>:</p>

<p><code>bash
cd my-app
npm install
</code></p>

<p>Great! If everything went well, you have your express <strong>app</strong> created!</p>

<p>Try <strong>running</strong> it just to see how it looks like:</p>

<p><code>bash
node app
open http://localhost:3000
</code></p>

<p>Now let&rsquo;s get to the <strong>API</strong>.</p>

<p>I&rsquo;ll be creating a simple <strong>User</strong> API, where you can <code>create</code>, <code>read</code>, <code>update</code>, <code>delete</code> and <code>list</code> the <strong>Users</strong> of your application.</p>

<p>The <strong>User</strong> attributes will be:</p>

<p><code>javascript
name: String,
surname: String,
email: String,
password: String
</code></p>

<p>The <strong>REST API</strong> will look like this at the end:</p>

<p><code>
GET /users - list all the users
GET /users/:id - read the user by id
POST /users - create a new user
PUT /users/:id - update the user by id
DELETE /users/:id - delete the user by id
</code></p>

<p>Let&rsquo;s create our first <code>model</code>! On the <code>my-app</code> directory, create a new dir called <code>models</code> and inside of it, a file called <code>user.js</code>:</p>

<p><code>bash
mkdir models
cd models
touch user.js
</code></p>

<p>Open the <code>user.js</code> file and create our <code>model</code>:</p>

<p>``` javascript
var mongoose = require(&lsquo;mongoose&rsquo;)
  , Schema = mongoose.Schema;</p>

<p>var User = new Schema({</p>

<pre><code>name:  String,
surname: String,
username: String,
email: String,
password: String
</code></pre>

<p>});</p>

<p>module.exports = mongoose.model(&lsquo;User&rsquo;, User);
```</p>

<p>Yay! We created our <strong>User</strong> model. Now, we have to implement the <code>controller</code>.</p>

<p>Go to the app root directory, and create a new dir called <code>controllers</code>, and a file <code>user.js</code>.</p>

<p><code>bash
mkdir controllers
cd controllers
touch user.js
</code></p>

<p>Implement the <code>controller</code> methods:</p>

<p>``` javascript
var User = require(&lsquo;../models/user.js&rsquo;);</p>

<p>exports.create = function(req, res) {
  User.findOne({ username: req.body.username }, function(err, user) {</p>

<pre><code>if(user != null) {
  res.send('user exists');
  return false;
}

new User({
  name: req.body.name,
  surname: req.body.surname,
  username: req.body.username,
  email: req.body.email,
  password: req.body.password
}).save();

res.send('success');
</code></pre>

<p>  });
}</p>

<p>exports.read = function(req, res) {
  User.findOne({ _id: req.params.id }, function(err, user) {</p>

<pre><code>res.send(user);
</code></pre>

<p>  });
}</p>

<p>exports.update = function(req, res) {
  User.update({ _id: req.params.id }, {</p>

<pre><code>$set: {
  name: req.body.name,
  surname: req.body.surname,
  email: req.body.email,
  password: req.body.password
}
</code></pre>

<p>  }).exec();</p>

<p>  return res.send(&lsquo;success&rsquo;);
}</p>

<p>exports.delete = function(req, res) {
  return User.findById(req.body.id, function(err, user) {</p>

<pre><code>return user.remove(function (err) {
  if (!err) {
    return res.send('removed');
  } else {
    return res.send(err);
  }
});
</code></pre>

<p>  });
}</p>

<p>exports.list = function(req, res) {
  User.find(function(err, users) {</p>

<pre><code>res.send(users);
</code></pre>

<p>  });
}
```</p>

<p>I&rsquo;m not going to explain the code above, because it&rsquo;s not the aim of this article. If you don&rsquo;t know what&rsquo;s going on there, I recommend you study a little more about <strong>Node.JS</strong> and <strong>Express</strong>, plus, read some  <strong>Mongoose</strong> docs (if you&rsquo;re already familiar with <strong>MongoDB</strong> or any other <strong>NoSQL</strong> database).</p>

<p>Well, we now have implemented our <code>model</code> and <code>controller</code>. It&rsquo;s time to manipulate some <strong>data</strong>.</p>

<p>Let&rsquo;s create our <code>routes</code>!</p>

<p>Open the <code>app.js</code> file of your project, and include the <strong>Mongoose</strong>  lib and it&rsquo;s connector, right after creating the <strong>app</strong>:</p>

<p><code>javascript
var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/users');
</code></p>

<p>Now include the <strong>controller</strong>, on the top of the <code>app.js</code>:</p>

<p><code>javascript
var user = require('./controllers/user');
</code></p>

<p>Great! We can now define our <strong>routes</strong>:</p>

<p><code>javascript
// user api
app.get('/users', user.list);
app.get('/users/:id', user.read);
app.post('/users', user.create);
app.put('/users/:id', user.update);
app.delete('/users/:id', user.delete);
</code></p>

<p>Well done! Here&rsquo;s our simple <strong>REST</strong> API example.</p>

<p>You can now insert some data, list, update, delete&hellip;</p>

<p>For now, it&rsquo;s all handled on the <strong>API</strong>, but in the next articles, I will be explaining how to implement <strong>views</strong> to manipulate our <strong>data</strong>.</p>

<p>The <strong>source code</strong> of this article is on <a href="https://github.com/gnuwilliam/simple-rest-api">GitHub</a>. Go there and take a look.</p>

<p>If you have any <strong>questions</strong> or there&rsquo;s some wrong <strong>code</strong> or <strong>spelling</strong>, please send me an e-mail or comment below!</p>

<p>Stay in touch! Thanks!</p>
]]></content>
  </entry>
  
</feed>
